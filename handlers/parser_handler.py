import logging
from telebot import types
from services.parser_service import parse_all_sources
from db.operations.db_users import db_get_user_city
from handlers.errors_handler import handle_network_errors

logger = logging.getLogger(__name__)

def setup_parser_handler(bot):
    @bot.callback_query_handler(func=lambda callback: callback.data == 'parser')
    @handle_network_errors
    def handle_parsing(callback):
        try:
            
            logger.info(f"handle_parsing –≤—ã–∑–≤–∞–Ω —Å callback={callback}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É callback –µ—Å—Ç—å message –∏ from_user
            if not callback.message:
                raise ValueError("–û—à–∏–±–∫–∞: callback.message –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (None)")
            if not callback.from_user:
                raise ValueError("–û—à–∏–±–∫–∞: callback.from_user –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (None)")   
            
            user_id = callback.from_user.id if callback.from_user else None
            chat_id = callback.message.chat.id if callback.message else None
            events = parse_all_sources(user_id)
            
            if not isinstance(chat_id, int):
                raise ValueError(f"chat_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º, –ø–æ–ª—É—á–µ–Ω–æ: {type(chat_id)}")
            if not events:  # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç
                logger.warning("–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–æ —Å–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                bot.send_message(callback.message.chat.id, "–°–æ–±—ã—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                return
            user_id = callback.from_user.id
            logger.info(f'–ü–∞—Ä—Å–∏–Ω–≥ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}, —Å–æ–±—ã—Ç–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ë–î {len(events)}, —Å–æ–±—ã—Ç–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ –ë–î "UpdatedEvents"')
            
            city = db_get_user_city(chat_id)
            if not city:
                city = "–ú–û–°–ö–í–ê"
                      
            markup = types.InlineKeyboardMarkup()
            btn1 = types.InlineKeyboardButton ('üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥', callback_data = 'change_city')
            btn2 = types.InlineKeyboardButton ('‚û°Ô∏è –í—ã–±—Ä–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', callback_data = 'filters')
            markup.row (btn1)
            markup.row (btn2)

            bot.send_message(callback.message.chat.id, f'–í –≥–æ—Ä–æ–¥–µ üèõÔ∏è{city}.\n–ù–∞–π–¥–µ–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π. \n–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –≤—ã–±–æ—Ä—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π' , reply_markup=markup)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —ç–ª–µ–º–µ–Ω—Ç–∞: {e}")
    

                
