# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã
import requests
import telebot
import sys
from telebot import types
from handlers.errors_handler import handle_network_errors
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
import logging
import datetime
from config import API_Weather

logger = logging.getLogger(__name__)

def setup_weather_handler(bot):
    @bot.callback_query_handler(func=lambda callback: callback.data == 'weather')
    @handle_network_errors
    def weather(callback):
        if callback.data == 'weather':
            try:
                res = requests.get(f'https://api.openweathermap.org/data/2.5/forecast?q=Moscow&appid={API_Weather}&units=metric')
                res.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤–æ–∑–Ω–∏–∫–ª–∞ –ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
                data = res.json()
                # print(data)
                temperature = data["list"][0]["main"]["temp"]
                wind = data["list"][0]["wind"]["speed"]
                temperature_fellslike = data["list"][0]["main"]["feels_like"]
                humidity = data["list"][0]["main"]["humidity"]
                pressure = data["list"][0]["main"]["grnd_level"]
                sunrise_ts = data['city']['sunrise']
                sunset_ts = data['city']['sunset']
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç HH:MM
                sunrise_time = datetime.datetime.fromtimestamp(sunrise_ts).strftime('%H:%M')
                sunset_time = datetime.datetime.fromtimestamp(sunset_ts).strftime('%H:%M')
                #sky = data["list"][0]["weather"]["main"]
                bot.send_message(callback.message.chat.id, f'<b>–ü–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ:</b> \n üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature} ¬∞C\n ü´† –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {temperature_fellslike} ¬∞C\n üí® –í–µ—Ç–µ—Ä: {wind} –º/—Å\n üí¶ –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity} %\n üèã –ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ: {pressure} –∫–ü–∞\n ‚òÄÔ∏è –í–æ—Å—Ö–æ–¥: {sunrise_time}\n üåô –ó–∞–∫–∞—Ç: {sunset_time}', parse_mode='html')
            except requests.exceptions.RequestException as e:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∑–∞–ø—Ä–æ—Å–∞
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
                bot.send_message(callback.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ API –ø–æ–≥–æ–¥—ã.")
            except KeyError:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
                # logger.info(f'–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}')
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö")
                bot.send_message(callback.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–≥–æ–¥—ã.")