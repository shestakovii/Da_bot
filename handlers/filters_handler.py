import telebot
from telebot import types
import logging
from datetime import datetime
from config import DEFAULT_CITY
from config import BOT_TOKEN
# from services.filter_service import apply_filters
from handlers.show_events_handler import show_events
from db.operations.db_events import db_get_events
from db.operations.db_users import db_get_user_city, db_update_user_city
from filters.event_filters import filter_by_price_free, filter_by_price_not_free, filter_events_by_time
from shared.shared_data import user_data
from datetime import datetime, timedelta
from handlers.errors_handler import handle_network_errors

bot = telebot.TeleBot(BOT_TOKEN)
logger = logging.getLogger(__name__)
user_filters = {}
user_filtered_events = {}
apply_filters_handler_func = None

def setup_filter_handler(bot):
    @bot.callback_query_handler(func=lambda callback: callback.data == 'filters')
    @handle_network_errors
    def handle_filters_callback(callback):
        try:
            user_id = callback.from_user.id
            chat_id = callback.message.chat.id
            
            # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ä–æ–¥–∞
            city = db_get_user_city(user_id)
            if not city:
                city = DEFAULT_CITY
                db_update_user_city(user_id, city)
                logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≥–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {city} –¥–ª—è user_id={user_id}")
            
            # 2. –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            show_category_selection(bot, chat_id, user_id, city)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_filters_callback: {e}")
            bot.answer_callback_query(callback.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤")

def show_category_selection(bot, chat_id, user_id, city):
    """–®–∞–≥ 1: –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in user_filters:
            user_filters[user_id] = {
                "category": None,
                "tags": [],
                "price": None,
                "city": city
            }
            
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("üé§ –ö–æ–Ω—Ü–µ—Ä—Ç—ã", callback_data='filter_category_concert'),
            types.InlineKeyboardButton("üé≠ –ê—Ñ–∏—à–∞ –ú–û", url = f'https://visitmo.ru/events/')
        )
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", reply_markup=markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_category_selection: {e}")

def show_tags_selection(bot, chat_id, user_id, message_id):
    """–®–∞–≥ 2: –í—ã–±–æ—Ä —Ç–µ–≥–æ–≤ (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä)"""
    try:
        markup = types.InlineKeyboardMarkup(row_width=2)
        
        # –¢–µ–∫—É—â–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–µ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_tags = user_filters.get(user_id, {}).get("tags", [])
        
        buttons = [
            types.InlineKeyboardButton(
                f"üé∏ –†–æ–∫ {'‚úÖ' if 'rock' in current_tags else ''}",
                callback_data='filter_tag_rock'
            ),
            types.InlineKeyboardButton(
                f"üé∑ Jazz/Blues {'‚úÖ' if 'jazz' in current_tags else ''}",
                callback_data='filter_tag_jazz'
            ),
            types.InlineKeyboardButton(
                f"üõ∏ –≠–ª–µ–∫—Ç—Ä–æ {'‚úÖ' if 'electro' in current_tags else ''}",
                callback_data='filter_tag_electro'
            ),
            types.InlineKeyboardButton(
                f"üé≠ –ö—É–ª—å—Ç—É—Ä–∞ {'‚úÖ' if 'culture' in current_tags else ''}",
                callback_data='filter_tag_culture'
            ),
            types.InlineKeyboardButton(
                f"üé§ –ö–∞–≤–µ—Ä—ã {'‚úÖ' if 'covers' in current_tags else ''}",
                callback_data='filter_tag_covers'
            ),
            types.InlineKeyboardButton(
                f"‚ô´ –î—Ä—É–≥–æ–µ {'‚úÖ' if 'other' in current_tags else ''}",
                callback_data='filter_tag_other'
            )
        ]
        
        markup.add(*buttons)
        markup.add(types.InlineKeyboardButton("üëÄ –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å—ë", callback_data='filter_select_all_tags'))
        markup.add(types.InlineKeyboardButton("–î–∞–ª–µ–µ ‚Üí", callback_data='next_to_price'))
        
        bot.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
            chat_id=chat_id,
            message_id=message_id,
            reply_markup=markup
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_tags_selection: {e}")


def show_price_selection(bot, chat_id, user_id, message_id):
    """–®–∞–≥ 3: –í—ã–±–æ—Ä —Ü–µ–Ω—ã"""
    try:
        markup = types.InlineKeyboardMarkup(row_width=2)
        current_price = user_filters.get(user_id, {}).get("price")
        
        buttons = [
            types.InlineKeyboardButton(
                f"üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–æ {'' if current_price == 'free' else ''}",
                callback_data='apply_price_free'
            ),
            types.InlineKeyboardButton(
                f"üí≤ –ü–ª–∞—Ç–Ω—ã–µ {'' if current_price == 'paid' else ''}",
                callback_data='apply_price_paid'
            ),
            types.InlineKeyboardButton(
                f"üëÄ –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å—ë {'' if current_price is None else ''}",
                callback_data='apply_price_all'
            )
        ]
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–Ω–æ–ø–∫–∏: –ø–µ—Ä–≤—ã–µ –¥–≤–µ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É, —Ç—Ä–µ—Ç—å—é –æ—Ç–¥–µ–ª—å–Ω–æ
        markup.add(buttons[0], buttons[1])
        markup.add(buttons[2])
        
        bot.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω:",
            chat_id=chat_id,
            message_id=message_id,
            reply_markup=markup
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_price_selection: {e}")



def setup_filter_category_selection_handler(bot):
    @bot.callback_query_handler(func=lambda callback: callback.data.startswith('filter_category_'))
    @handle_network_errors
    def handle_category_selection(callback):
        try:
            user_id = callback.from_user.id
            category = callback.data.split('_')[-1]
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            if user_id not in user_filters:
                user_filters[user_id] = {}
            user_filters[user_id]['category'] = category
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–µ–≥–æ–≤
            show_tags_selection(bot, callback.message.chat.id, user_id, callback.message.message_id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_category_selection: {e}")

def setup_filter_tag_selection_handler(bot):
    @bot.callback_query_handler(func=lambda callback: callback.data.startswith('filter_tag_'))
    @handle_network_errors
    def handle_tag_selection(callback):
        try:
            user_id = callback.from_user.id
            tag = callback.data.split('_')[-1]
            
            if tag in user_filters.get(user_id, {}).get('tags', []):
                user_filters[user_id]['tags'].remove(tag)
            else:
                if 'tags' not in user_filters[user_id]:
                    user_filters[user_id]['tags'] = []
                user_filters[user_id]['tags'].append(tag)
                    
            logger.info(f"–¢–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –Ω–∞ —ç—Ç–∞–ø–µ –≤—ã–±–æ—Ä–∞ –¢–ï–ì–û–í –¥–ª—è user_id={user_id}: {user_filters[user_id]}")
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            show_tags_selection(bot, callback.message.chat.id, user_id, callback.message.message_id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_tag_selection: {e}")

def setup_filter_all_tags_selection_handler(bot):
    @bot.callback_query_handler(func=lambda callback: callback.data == 'filter_select_all_tags')
    @handle_network_errors
    def handle_all_tags_selection(callback):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å—ë'"""
        try:
            user_id = callback.from_user.id
            chat_id = callback.message.chat.id
            
            # 1. –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–µ–≥–∏
            user_filters[user_id]['tags'] = []
            
            # 2. –î–∞–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            bot.answer_callback_query(callback.id, "–í—ã–±—Ä–∞–Ω—ã –≤—Å–µ —Ç–µ–≥–∏")
            
            # 3. –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ü–µ–Ω—ã (–≤–º–µ—Å—Ç–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞ —Ç–µ–≥–æ–≤)
            show_price_selection(bot, chat_id, user_id, callback.message.message_id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_show_all: {e}")
            bot.answer_callback_query(callback.id, "–û—à–∏–±–∫–∞")



def setup_filter_next_to_price_handler(bot):
    @bot.callback_query_handler(func=lambda callback: callback.data == 'next_to_price')
    @handle_network_errors
    def handle_next_to_price(callback):
        try:
            user_id = callback.from_user.id
            show_price_selection(bot, callback.message.chat.id, user_id, callback.message.message_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_next_to_price: {e}")
            

def setup_filter_price_selection_handler(bot):
    @bot.callback_query_handler(func=lambda callback: callback.data.startswith('apply_price_'))
    @handle_network_errors
    def handle_price_selection(callback):
        try:
            user_id = callback.from_user.id
            chat_id = callback.message.chat.id
            price_filter = callback.data.split('_')[-1]
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä
            if price_filter == 'all':
                user_filters[user_id]['price'] = None
            else:
                user_filters[user_id]['price'] = price_filter
            logger.info(f"–¢–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¶–ï–ù–´ –¥–ª—è user_id={user_id}: {user_filters[user_id]}")
            # –°–æ–∑–¥–∞–µ–º –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ apply_filters
            class FakeCallback:
                def __init__(self, original):
                    self.data = 'apply_filters'
                    self.from_user = original.from_user
                    self.message = original.message
                    self.id = original.id
            # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ apply_filters —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
            global apply_filters_handler_func
            apply_filters_handler_func(FakeCallback(callback))
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Ü–µ–Ω—ã
            try:
                bot.delete_message(chat_id, callback.message.message_id)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_price_selection: {e}")
            bot.answer_callback_query(callback.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤")

            

def setup_filter_apply_filters_handler(bot):
    global apply_filters_handler_func
    @bot.callback_query_handler(func=lambda callback: callback.data == 'apply_filters')
    @handle_network_errors
    def apply_filters_handler(callback):
        try:
            user_id = callback.from_user.id
            chat_id = callback.message.chat.id
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –≥–æ—Ä–æ–¥—É
            city = db_get_user_city(user_id)
            if city:
                if user_id not in user_filters:
                    user_filters[user_id] = {}
                user_filters[user_id]['city'] = city
            
            current_datetime = datetime.now()
            current_date = datetime.now().strftime("%Y-%m-%d")
            
            logger.info(f'User_filters –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º –≤ –ë–î: {user_filters.get(user_id, {})}')
            
            # 1. –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∏–∑ –ë–î (—Ç–æ–ª—å–∫–æ –ø–æ –±–∞–∑–æ–≤—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º: –≥–æ—Ä–æ–¥, –¥–∞—Ç–∞)
            events = db_get_events(current_date, {'city': user_filters.get(user_id, {}).get('city')})
            if not isinstance(events, list):
                logger.error("–û—à–∏–±–∫–∞: db_get_events –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
                bot.answer_callback_query(callback.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–±—ã—Ç–∏–π.")
                return
            
            # 2. –ó–∞—Ç–µ–º –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            filtered_events = events
            user_filter_data = user_filters.get(user_id, {})
            logger.info(f'–°–æ–±—ã—Ç–∏—è {len(filtered_events)} –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π –∏–∑ –ë–î (–®–ê–ì 2)')  
            
            # –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if user_filter_data.get("category"):
                filtered_events = [
                    event for event in filtered_events
                    if isinstance(event.get("category"), str) and 
                    event["category"].lower() == user_filter_data["category"].lower()
                ]
                logger.info(f'–°–æ–±—ã—Ç–∏—è {len(filtered_events)} –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
            
            # –§–∏–ª—å—Ç—Ä –ø–æ —Ç–µ–≥–∞–º
            # if user_filter_data.get("tags"):
            if len(user_filter_data["tags"]) > 0:
                tag_keywords = {
                    "rock": ["rock", "metal", "core", "alternative", "psychedelic", "hard-n-heavy", 
                            "punk", "industrial", "noise", "new wave", "brutal death", "screamo", 
                            "shoegaze", "ritual industrial", "drone", "grunge", "nu-metal"],
                    "jazz": ["jazz", "blues", "ethno jazz", "fusion", "soul", "–¥–∂–∞–∑", "–±–ª—é–∑", "funk"],
                    "other": ["acoustic", "reggae", "crossover", "–Ω–µ–æ–∫–ª–∞—Å—Å–∏–∫–∞", "–∫–∏–Ω–æ–º—É–∑—ã–∫–∞"],
                    "culture": ["–æ–ø–µ—Ä–∞", "—Å–ø–µ–∫—Ç–∞–∫–ª—å", "–ø–æ—ç–∑–∏—è", "–º—é–∑–∏–∫–ª", "–∫–∞–±–∞—Ä–µ"],
                    "covers": ["covers", "–∫–∞–≤–µ—Ä–∞"],
                    "electro": ["electro", "minimal", "experimental", "aggrotech", "edm"]
                }

                prepared_tags = []
                for tag in user_filter_data["tags"]:
                    prepared_tags.extend(tag_keywords.get(tag, []))
                  
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–≥–∏ —Å–æ–±—ã—Ç–∏—è –≤ —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ –æ–Ω–∏ –≤ —Å—Ç—Ä–æ–∫–µ
                    def get_tags_list(event_tags):
                        if isinstance(event_tags, list):
                            return event_tags
                        elif isinstance(event_tags, str):
                            return [tag.strip() for tag in event_tags.split(",")]
                        return []
                    
                    filtered_events = [
                        event for event in filtered_events
                        if any(
                            any(
                                keyword.lower() in tag.lower()
                                for tag in get_tags_list(event.get("tags", ""))
                            )
                            for keyword in prepared_tags
                        )
                    ]
                logger.info(f'–°–æ–±—ã—Ç–∏—è {len(filtered_events)} –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ç–µ–≥–∞–º')
            
            # –§–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ
            if user_filter_data.get("price") == "free":
                filtered_events = filter_by_price_free(filtered_events)
                logger.info(f'–°–æ–±—ã—Ç–∏—è {len(filtered_events)} –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ü–µ–Ω–µ (free)')
            elif user_filter_data.get("price") == "paid":
                filtered_events = filter_by_price_not_free(filtered_events)
                logger.info(f'–°–æ–±—ã—Ç–∏—è {len(filtered_events)} –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ü–µ–Ω–µ (paid):{filtered_events}')
                
                
            # 2.1. –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
            valid_events = []
            for event in filtered_events:
                try:
                    datetime.strptime(f"{event['event_date']} {event['event_time']}", "%Y-%m-%d %H:%M")
                    valid_events.append(event)
                except Exception as e:
                    logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Å–æ–±—ã—Ç–∏–∏ {event.get('Id')}: {e}")


            # time_threshold = datetime.now() - timedelta(hours=2)

            # # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π
            # filtered_events = [
            #     event for event in filtered_events
            #     if event.get('event_date') and event.get('event_time')
            #     and datetime.strptime(f"{event['event_date']} {event['event_time']}", "%Y-%m-%d %H:%M") >= time_threshold
            # ]
            
            logger.info(f'–§–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ {len(filtered_events)} —Å–æ–±—ã—Ç–∏–π –ø–æ—Å–ª–µ –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤')
            
            total_events_count = len(filtered_events)
            user_data[user_id] = {
                "filtered_events": filtered_events,
                "current_index": 0,
                "total_events_count": total_events_count,
                "show_events_message_id": None # ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –¥–ª—è show_events
            }

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
            logger.info(f"–≤ Filters_handler –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(filtered_events)} —Å–æ–±—ã—Ç–∏–π –¥–ª—è user_id={user_id}")
            logger.info(f'–°–æ—Ö—Ä–∞–Ω–µ–Ω —Å–ø–∏—Å–æ–∫ user_data: {user_data}')
    
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç           
            show_events(bot, chat_id, user_id, filtered_events)
            
            # –û—á–∏—â–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            if user_id in user_filters:
                del user_filters[user_id]
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ apply_filters_handler: {e}")
            bot.answer_callback_query(callback.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤")
            
    apply_filters_handler_func = apply_filters_handler
