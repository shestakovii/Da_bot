from telebot import types
import html
from datetime import datetime
import logging
from db.operations.db_events import db_increment_event_show_count
from shared.shared_data import user_data
from handlers.errors_handler import handle_network_errors

logger = logging.getLogger(__name__)


def show_events(bot, chat_id: int, user_id: int, events: list, is_next=False, chunk_size = 5):
    if not isinstance(events, list):
        raise TypeError(f"–ê—Ä–≥—É–º–µ–Ω—Ç events –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å list, –ø–æ–ª—É—á–µ–Ω–æ: {type(events)}")

    if not events:
        bot.send_message(chat_id, "–°–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã ‚òπÔ∏è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã üßê")
        markup = types.InlineKeyboardMarkup()
        btn_filters = types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã üîç", callback_data='filters')
        markup.row(btn_filters)
        return []
    

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π
    current_index = user_data.get(user_id, {}).get('current_index', 0)
    total_events_count = user_data.get(user_id, {}).get('total_events_count', len(events))
    filtered_events = user_data.get(user_id, {}).get('filtered_events', [])
    message_ids = user_data.get(user_id, {}).get('message_ids', [])
    
    
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ (–Ω–µ –ø—Ä–∏ next_events)
    if not is_next:
        user_data.setdefault(user_id, {})['filtered_events'] = events
        user_data.setdefault(user_id, {})['current_index'] = 0
        user_data.setdefault(user_id, {})['total_events_count'] = len(events)
    
    logger.info(
        f'–í—ã–∑–æ–≤ show_events. –¢–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å: {user_data.get(user_id, {}).get("current_index", 0)}, '
        f'–í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {user_data.get(user_id, {}).get("total_events_count", 0)}, '
        f'–§–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è: {len(user_data.get(user_id, {}).get("filtered_events", []))}'
    )
        
     # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–π —á–∞–Ω–∫ —Å–æ–±—ã—Ç–∏–π
    events_to_show = filtered_events[current_index : current_index + chunk_size]
           
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–≥–ª–∞–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è show_events
    show_event_message_text = (
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–º–µ—á–∞–π—Ç–µ –°–û–ë–´–¢–ò–Ø, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –ò–ù–¢–ï–†–ï–°–ù–û –ø–æ—Å–µ—Ç–∏—Ç—å –∏–ª–∏ –ù–ï –û–ß–ï–ù–¨.\n"
        f"ü§ñ –Ø –±—É–¥—É —Å—Ç–∞—Ä–∞—Ç—å—Å—è —É—á–µ—Å—Ç—å –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ –±—É–¥—É—â–µ–º.\n"
        f"–ü–û–ö–ê–ó–ê–ù–û –°–û–ë–´–¢–ò–ô: {min(current_index + 5, total_events_count)} –∏–∑ {total_events_count}"
    )

    # –ï—Å–ª–∏ –µ—Å—Ç—å ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ
    show_events_message_id = user_data.get(user_id, {}).get('show_events_message_id')
    if show_events_message_id:
        bot.edit_message_text(
            chat_id=chat_id,
            message_id=show_events_message_id,
            text=show_event_message_text,
            parse_mode="Markdown"
        )
    else:
        # –ï—Å–ª–∏ ID –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
        show_event_message = bot.send_message(chat_id, show_event_message_text, parse_mode="Markdown")
        user_data.setdefault(user_id, {})['show_events_message_id'] = show_event_message.message_id


    message_ids = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–¥–±–æ—Ä–∫–∏
    logger.info(f' –°–ø–∏—Å–æ–∫ message_ids –≤ –ù–ê–ß–ê–õ–ï show_ebents: {message_ids}')
    
    for event in events_to_show:
        try:
            formatted_date = datetime.strptime(event['event_date'], "%Y-%m-%d").strftime("%d-%m")
        except (ValueError, TypeError, KeyError):
            formatted_date = "–î–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"  # –ó–∞–≥–ª—É—à–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

        message = (
            f"üìÖ –î–∞—Ç–∞: {formatted_date}\n"
            f"‚è∞ –í—Ä–µ–º—è: {event['event_time']}\n"
            f"üìç –ú–µ—Å—Ç–æ: [{event['event_location_name']}]({event.get('event_location_url', '#')})\n"
            f"üé∏ –ù–∞–∑–≤–∞–Ω–∏–µ: [{event['event_name']}]({event.get('event_name_url', '#')})\n"
            f"üé∂ –¢–µ–≥–∏: {', '.join(event['tags']) if event['tags'] else '–¢–µ–≥–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã'}\n"
            f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {event['price']}\n"
        )

        # –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ Like/Dislike
        markup = types.InlineKeyboardMarkup()
        like_btn = types.InlineKeyboardButton("‚ù§Ô∏è Like", callback_data=f"like_{event['Id']}")
        dislike_btn = types.InlineKeyboardButton("üëé Dislike", callback_data=f"dislike_{event['Id']}")
        markup.row(like_btn, dislike_btn)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
        sent_message = bot.send_message(chat_id, message, reply_markup=markup, disable_web_page_preview=True, parse_mode="Markdown")
        message_ids.append(sent_message.message_id)

        try:
            db_increment_event_show_count(user_id, event['Id'])  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–æ–≤
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ–∫–∞–∑–æ–≤: {e}")

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–°–ª–µ–¥—É—é—â–∏–µ —Å–æ–±—ã—Ç–∏—è" –∏ "–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã" (–í–°–ï–ì–î–ê!)
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–µ —Å–æ–±—ã—Ç–∏—è ‚û°Ô∏è", callback_data='next_events')
    btn2 = types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã üîç", callback_data='filters')
    markup.row(btn1)
    markup.row(btn2)
    sent_message = bot.send_message(chat_id, "–•–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å –±–æ–ª—å—à–µ —Å–æ–±—ã—Ç–∏–π?", reply_markup=markup, parse_mode="Markdown")
    message_ids.append(sent_message.message_id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π


    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    user_data[user_id]['current_index'] = current_index + len(events_to_show)
    user_data[user_id]['message_ids'] = message_ids
    logger.info(f' –°–ø–∏—Å–æ–∫ message_ids –≤ –ö–û–ù–¶–ï show_ebents: {message_ids}')
    return message_ids  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ ID —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–¥–±–æ—Ä–∫–∏



def show_next_events_handler(bot):
    @bot.callback_query_handler(func=lambda callback: callback.data == 'next_events')
    @handle_network_errors
    def next_events_handler(callback):
        chat_id = callback.message.chat.id
        user_id = callback.from_user.id

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ü–ï–†–ï–î –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–æ–≤—ã—Ö
        if user_id in user_data and 'message_ids' in user_data[user_id]:
            old_message_ids = user_data[user_id]['message_ids'].copy()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ø–∏—é
            for message_id in old_message_ids:
                try:
                    bot.delete_message(chat_id, message_id)
                except Exception as e:
                    if "message to delete not found" not in str(e):  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —É–∂–µ —É–¥–∞–ª–µ–Ω–Ω—ã–µ
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        filtered_events = user_data.get(user_id, {}).get('filtered_events', [])
        current_index = user_data.get(user_id, {}).get('current_index', 0)
        # total_events_count = user_data.get(user_id, {}).get('total_events_count', 0)

        logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π –≤ user_data.filtered_events: {len(filtered_events)}")

        if filtered_events:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –ø–µ—Ä–µ–¥ –≤—ã–±–æ—Ä–∫–æ–π —Å–ª–µ–¥—É—é—â–∏—Ö —Å–æ–±—ã—Ç–∏–π
            next_index = current_index + 5
            next_events = filtered_events[current_index:next_index]

            if next_events:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–µ —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ show_events 
                message_ids = show_events(bot, chat_id, user_id, next_events, is_next=True)
                user_data[user_id]['message_ids'] = message_ids  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                user_data[user_id]['current_index'] = next_index
                bot.answer_callback_query(callback.id, "–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–µ —Å–æ–±—ã—Ç–∏—è...")
            else:
                bot.send_message(chat_id, "–í—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è.")
                markup = types.InlineKeyboardMarkup()
                btn2 = types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã üîç", callback_data='filters')
                markup.row(btn2)
                bot.send_message(chat_id, "–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã?", reply_markup=markup)
                    
        else:
            bot.answer_callback_query(callback.id, "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –±–æ–ª—å—à–µ –Ω–µ—Ç.")



